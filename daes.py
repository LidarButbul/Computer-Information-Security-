import argparse


sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,)

inv_sbox =(
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def m_blocks(state):
    m = [int(i) for i in state]
    m = [[m[i], m[i+1]] for i in range(0, len(m), 2)]
    return m


def k_blocks(key):
    k = [int(i) for i in key]
    k = [[k[i], k[i+1]] for i in range(0, len(k), 2)]
    return k


def add_round_key(state, key):
    n = len(state)
    result = []
    for i in range(n):
        result.append(state[i] ^ key[i])
    return result


def sub_bytes(state):
    new_state = []
    for i in state:
        b = sbox[i]
        new_state.append(b)
    return new_state


def inv_sub_bytes(state):
    res = []
    for i in state:
        b = inv_sbox[i]
        res.append(b)
    return res


def des_xor_encryption(state, key):
    m = round(len(state) / 2)
    k = round(len(key) / 2)
    left_key = key[:k]
    l = state[:m]
    r = state[m:]
    l1 = []
    for i in range(len(l)):
        tmp = l[i] ^ r[i]
        l1.append(tmp ^ left_key[i])
    res = r + l1
    return res


def des_xor_decryption(state, key):
    l = state[1]
    r = state[0]
    l1 = l ^ r ^ key[0]
    res = [l1, r]
    return res


def double_deas_encryption(params):
    message = params[0]
    key = params[1]
    output = params[2]

    with open(message, 'rb') as f1:
        state = f1.read()
    with open(key, 'rb') as f2:
        k = f2.read()
    m = m_blocks(state)
    k = k_blocks(k)
    cipher = daes_encryption(daes_encryption(m, k[0]), k[1])
    with open(output, "wb") as f:
        f.writelines(bytes(sublist) for sublist in cipher)


def daes_encryption(state, key):
    cipher = []
    for b in state:
        b = sub_bytes(b)
        b = add_round_key(b, key)
        c = des_xor_encryption(b, key)
        cipher.append(c)
    return cipher


def double_deas_decryption(params):
    cipher = params[0]
    key = params[1]
    output = params[2]

    with open(cipher, 'rb') as f1:
        c = f1.read()
    with open(key, 'rb') as f2:
        k = f2.read()
    c = m_blocks(c)
    k = k_blocks(k)
    message = daes_decryption(daes_decryption(c, k[1]), k[0])
    with open(output, "w") as f:
        f.write(''.join(''.join(chr(item) for item in sublist) for sublist in message))


def daes_decryption(state, key):
    message = []
    for b in state:
        b = des_xor_decryption(b, key)
        b = add_round_key(b, key)
        c = inv_sub_bytes(b)
        message.append(c)
    return message


def daes_break_key(params):
    message1 = params[0]
    cipher1 = params[1]
    message2 = params[2]
    cipher2 = params[3]
    output = params[4]
    with open(message1, 'rb') as f1:
        m1 = f1.read()
    with open(cipher1, 'rb') as f2:
        c1 = f2.read()
    with open(message2, 'rb') as f3:
        m2 = f3.read()
    with open(cipher2, 'rb') as f4:
        c2 = f4.read()
    x_dict = {}
    m1_blocks = m_blocks(m1)
    for i in range(256):
        k = [63, i]
        x = daes_encryption(m1_blocks, k)
        x_dict[tuple(map(tuple, x))] = k
    c1_blocks = m_blocks(c1)
    k_list = []
    for i in range(256):
        k = [63, i]
        x = daes_decryption(c1_blocks, k)
        if tuple(map(tuple, x)) in x_dict.keys():
            k_list.append([x_dict[tuple(map(tuple, x))], k])
    m2_blocks = m_blocks(m2)
    c2_blocks = m_blocks(c2)
    for i in k_list:
        x1 = daes_encryption(m2_blocks, i[0])
        x2 = daes_decryption(c2_blocks, i[1])
        if x1 == x2:
            with open(output, "wb") as f:
                f.writelines(bytes(sublist) for sublist in i)
            break


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-e', '--encrypt', nargs=3)
    parser.add_argument('-d', '--decrypt', nargs=3)
    parser.add_argument('-b', '--breakkey', nargs=5)
    args = parser.parse_args()
    if args.encrypt:
        double_deas_encryption(args.encrypt)
    if args.decrypt:
        double_deas_decryption(args.decrypt)
    if args.breakkey:
        daes_break_key(args.breakkey)

